@page "/authentication"
@using EisstockbahnenWebModel;
@using System;
@using System.Security.Cryptography;
@using System.Text;
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row" style="margin-top:25em">
        <div>
            <div class="input-field col s6 offset-s3">
                <input id="userName" type="text" @bind="userName">
                <label class="active" for="userName">Benutzername</label>
            </div>
            <div class="input-field col s6 offset-s3">
                <input id="password" type="password" @bind="password">
                <label class="active" for="password">Passwort</label>
            </div>
            <div class="col s6 offset-s3" style="display: @visibility">
                <p>Falscher Username oder Passwort.</p>
            </div>

            <div class="col s6 offset-s3">
                <button class="btn waves-effect waves-light grey darken-2" @onclick="CheckUser">Senden</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string userName;
    private string password;
    private string hash;

    string visibility = "none";

    private async void CheckUser(MouseEventArgs e)
    {
        using (SHA256 sha256Hash = SHA256.Create())
        {
            hash = GetHash(sha256Hash, password);
        }

        var accountModels = await Http.GetFromJsonAsync<AccountModel[]>("https://agaeisstockbahnenapi.azurewebsites.net/api/account");
        var account = accountModels.FirstOrDefault(x => x.Username == userName && x.Password == hash);
        if (account != null)
        {
            using (SHA256 sha256Hash = SHA256.Create())
            {
                hash = GetHash(sha256Hash, "authentified");
            }

            NavigationManager.NavigateTo($"calculation/{hash}");
        }
        else
        {
            visibility = "block";
        }
    }

    private static string GetHash(HashAlgorithm hashAlgorithm, string input)
    {

        // Convert the input string to a byte array and compute the hash.
        byte[] data = hashAlgorithm.ComputeHash(Encoding.UTF8.GetBytes(input));

        // Create a new Stringbuilder to collect the bytes
        // and create a string.
        var sBuilder = new StringBuilder();

        // Loop through each byte of the hashed data
        // and format each one as a hexadecimal string.
        for (int i = 0; i < data.Length; i++)
        {
            sBuilder.Append(data[i].ToString("x2"));
        }

        // Return the hexadecimal string.
        return sBuilder.ToString();
    }
}