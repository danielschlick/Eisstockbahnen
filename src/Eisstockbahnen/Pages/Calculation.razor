@page "/calculation/{hash}"

@using EisstockbahnenWebModel;
@using Eisstockbahnen.Model;
@using Eisstockbahnen.Services;
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div class="container">

    @foreach (var calculationItem in calculationItems)
    {
        <div class="row">
            <h5>@calculationItem.Product.Name:</h5>
            <div class="input-field col s12 l6">
                <input placeholder="Placeholder" id="b_@calculationItem.Product.Id" type="number" min="0" @bind="calculationItem.Bought">
                <label class="active" for="b_@calculationItem.Product.Id">Anzahl gekauft</label>
            </div>
            <div class="input-field col s12 l6">
                <input id="bp_@calculationItem.Product.Id" type="number" min="0" @bind="calculationItem.BuyPrice">
                <label class="active" for="bp_@calculationItem.Product.Id">Preis pro @calculationItem.Product.Unit.Name</label>
            </div>
            <div class="input-field col s12 l6">
                <input id="s_@calculationItem.Product.Id" type="number" min="0" @bind="calculationItem.Sold">
                <label class="active" for="s_@calculationItem.Product.Id">Anzahl verkauft</label>
            </div>
            <div class="input-field col s12 l6">
                <input id="sp_@calculationItem.Product.Id" type="number" min="0" @bind="calculationItem.SellPrice">
                <label class="active" for="sp_@calculationItem.Product.Id">Preis pro @calculationItem.Product.Unit.Name</label>
            </div>
        </div>
    }

    <div class="row">
        <button class="btn waves-effect waves-light grey darken-2" @onclick="Calculate">Berechnen</button>
    </div>


    <div style="display: @visibility">
        <div class="divider"></div>
        @foreach (var calculationItem in calculationItems)
        {
            <div class="row">
                <h5>@calculationItem.Product.Name</h5>
                <div class="col s12 l4">
                    <p>Einnahmen: @Decimal.Multiply((decimal)calculationItem.SellPrice, (decimal)calculationItem.Sold)€</p>
                </div>
                <div class="col s12 l4">
                    <p>Ausgaben: @Decimal.Multiply((decimal)calculationItem.BuyPrice, (decimal)calculationItem.Bought)€</p>
                </div>
                <div class="col s12 l4">
                    <p>Profit: @calculationItem.Profit€</p>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string hash { get; set; }

    string visibility = "none";
    string verifyHash = "de32a85b3850640b2371fc4c5377cb7f8f1bc51621604144d9c1b7265b029e8d";

    private List<CalculationItem> calculationItems = new List<CalculationItem>();

    protected override async Task OnInitializedAsync()
    {
        var products = await Http.GetFromJsonAsync<ProductModel[]>("https://agaeisstockbahnenapi.azurewebsites.net/api/product");
        foreach (var product in products)
        {
            calculationItems.Add(new CalculationItem(product));
        }
    }

    protected override void OnParametersSet()
    {
        if (hash != verifyHash)
        {
            NavigationManager.NavigateTo($"authentication");
        }

    }

    private void Calculate(MouseEventArgs e)
    {

        CalculationService service = new CalculationService();
        calculationItems = service.CalculateItems(calculationItems);

        visibility = "block";
    }
}
